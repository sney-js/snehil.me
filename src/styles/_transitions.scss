$appearing-animation-speed: 750ms cubic-bezier(0.35, 1, 0.45, 1);

@keyframes shake {
  //10%, 90% {
  //  transform: translate3d(0px, -1px, 0);
  //}

  20%,
  80% {
    transform: translate3d(0px, 2px, 0);
  }

  30%,
  50%,
  70% {
    transform: translate3d(0px, 0px, 0);
  }

  40%,
  60% {
    transform: translate3d(0px, 2px, 0);
  }
}
/*-----------------------------------------------*/
.fadeup-enter {
  opacity: 0;
}

.fadeup-exit-active {
  //display: none !important;
}

.fadeup-enter.fadeup-enter-active {
  opacity: 1;
  transition: $appearing-animation-speed;
}

.fadeup {
  opacity: 0;
  transform: translate3d(0, 80px, 0);
}

.fadeup-initial {
  opacity: 0;
  transform: translate3d(0, 80px, 0);
  transition: all $appearing-animation-speed;
}

.fadeup-initial.fadeup-enter-done,
.fadeup-initial.fadeup-appear-done {
  opacity: 1;
  transform: translate3d(0, 0, 0);
  transition: all $appearing-animation-speed;
}

.movedown-initial.movedown-appear {
  transform: translate3d(0, -100%, 0);
  transition: transform $appearing-animation-speed;
}

.movedown-exit-active {
  display: none !important;
}

.movedown-initial.movedown-appear-done {
  transform: translateY(0%);
  transition: transform $appearing-animation-speed;
}

.movedown-initial.movedown-enter {
  transform: translate3d(0, -100%, 0);
  transition: transform $appearing-animation-speed;
}

.movedown-initial.movedown-enter-done {
  transform: translateY(0%);
  transition: transform $appearing-animation-speed;
}

.movedown-initial {
  transition: transform $appearing-animation-speed;
  transform: translateY(-100%);
}

// React CSS Transitions

.fade-enter {
  opacity: 0;
}

.fade-enter-active {
  opacity: 1;
  transition: opacity 300ms;
}

.fade-exit {
  opacity: 1;
}

.fade-exit-active {
  opacity: 0;
  transition: opacity 300ms;
}

//--------------------------PROJECT FILTERS------------------
.d-project-grid {
  &.filter-exit {
    opacity: 1;
    transition: 0.25s;

    &-active {
      opacity: 0;
    }
  }

  &.filter-enter {
    opacity: 0;
    transition: 1s;

    &-active {
      opacity: 1;
    }
  }

  &.filter-exit {
    .d-card-container .d-card {
      transition: 1s ease-in;
    }
  }
  &.filter-enter{
    .d-card-container .d-card{
      transition: 1s ease-out;
    }
  }

  &.filter-enter .d-card-container {

    &:nth-of-type(even) .d-card {
      transform: translateY(100%);
    }

    &:nth-of-type(odd) .d-card {
      transform: translateY(-100%);
    }
  }

  &.filter-enter-active,
  &.filter-enter-done {
    .d-card-container {
      opacity: 1;
      overflow: unset !important;
      &:nth-of-type(even) .d-card {
        transform: translateY(0px);
      }

      &:nth-of-type(odd) .d-card {
        transform: translateY(0px);
      }

    }
  }
}

//--------------------border anims-----------------
.border-anim-draw {
  //transition: color 0.25s;
  --color-border-anim: var(--color-body);
  $timing: 0.25s;
  $timing-func: linear;
  
  &::before,
  &::after {
    box-sizing: inherit;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  &::before,
  &::after {
    // Set border to invisible, so we don't see a 4px border on a 0x0 element before the transition starts
    border: 2px solid transparent;
    width: 0;
    height: 0;
  }

  // This covers the top & right borders (expands right, then down)
  &::before {
    top: 0;
    left: 0;
  }

  // And this the bottom & left borders (expands left, then up)
  &::after {
    bottom: 0;
    right: 0;
  }

  &::after {
    transition: border-color $timing $timing-func $timing*2, // Wait for ::before to finish before showing border
    width $timing $timing-func $timing*1, // And then exanding width
    height $timing $timing-func $timing*0;
  }

  &::before {
    transition: border-color $timing $timing-func $timing*3,
    width $timing $timing-func $timing*3, // Width expands first
    height $timing $timing-func $timing*2; // And then height
  }

  // Hover styles
  &:hover::before,
  &:hover::after {
    width: 100%;
    height: 100%;
    border-width: 2px;
  }

  &:hover::before {
    border-top-color: var(--color-border-anim); // Make borders visible
    border-right-color: var(--color-border-anim);
    transition: border-color $timing $timing-func $timing*0,
    width $timing $timing-func, // Width expands first
    height $timing $timing-func $timing; // And then height
  }

  &:hover::after {
    border-bottom-color: var(--color-border-anim); // Make borders visible
    border-left-color: var(--color-border-anim);
    transition: border-color 0s $timing-func $timing*2, // Wait for ::before to finish before showing border
    width $timing $timing-func $timing*2, // And then exanding width
    height $timing $timing-func $timing*3; // And finally height
  }
}

.border-anim-meet {
  // Inherits from .draw
  @extend .border-anim-draw;
  --color-border-anim: var(--color-body);
  $timing: 0.25s;
  $timing-func: linear;

  &:hover {
    color: var(--color-border-anim);
  }

  // Start ::after in same position as ::before
  &::after {
    top: 0;
    left: 0;
  }

  // Change colors
  &:hover::before {
    border-top-color: var(--color-border-anim);
    border-right-color: var(--color-border-anim);
    transition: // Animate height first, then width
      height $timing $timing-func $timing,
      width $timing $timing-func $timing*0;
  }

  &:hover::after {
    border-bottom-color: var(--color-border-anim);
    border-left-color: var(--color-border-anim);
    transition: // Animate height first, then width
      height $timing $timing-func $timing*0,
      width $timing $timing-func $timing;
  }

}